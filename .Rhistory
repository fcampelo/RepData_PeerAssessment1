manipulate(function(mu) plot(density(rnorm(1000,mu,2)),type="l"),mu=slider(62,74,step=0.5))
myfun<-function(mu){plot(density(rnorm(1000,mu,2)),type="l")};manipulate(myfun,mu=slider(62,74,step=0.5))
myfun<-function(mu){plot(density(rnorm(1000,mu,2)),type="l")}
myfun<-function(mu){plot(density(rnorm(1000,mu,2)),type="l")};manipulate(myfun(mu),mu=slider(62,74,step=0.5))
(.75*.3)/(.75*.3 + .48*.7)
install.packages("RMySQL)
install.packages("RMySQL")
rm(list=ls())
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query);
dim(affyMisSmall)
source("http://bioconductor.org/biocLite.R")
version()
?version
R.version()
R.Version()
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf= h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
install.packages("XML")
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
install.packages
install.packages("httr")
library(httr)
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
pg1
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "f4f4e5f023dc23b0b8b2")
?oauth_app
myapp <- oauth_app("github", "f4f4e5f023dc23b0b8b2", "b99891ce60dd6606c7da973a053a97bed399f6fc")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
?require
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
names(req)
req$date
req$times
req[[1]]
req[[2]]
req[[3]]
req[[4]]
req[[4]]
req[[5]]
req[[6]]
names(req)
req[[7]]
req[[8]]
req[[9]]
?xyplot
library(lattice)
?xyplot
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
?qplot
qplot(mpg, wt, data=mtcars)
qplot(mpg, wt, data=mtcars, facets=vs ~ am)
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=year)
qplot(displ,hwy,data=mpg,color=model)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"))
qplot(hwy,data=mpg,fill=drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(hwy,data=mpg,fill=drv)
?maacs
??maacs
ggplot(mpg,aes=(displ,hwy))
ggplot(mpg,aes=c(displ,hwy))
a<-ggplot(mpg,aes=c(displ,hwy))
a+geom_points()+geom_smooth()
a+geom_point()+geom_smooth()
a<-ggplot(mpg,aes(displ,hwy))
a+geom_point()+geom_smooth()
a+geom_point()+geom_smooth(method="lm")
a+geom_point(color=2)+geom_smooth(method="lm")
a+geom_point(color=0)+geom_smooth(method="lm")
a+geom_point(color=1)+geom_smooth(method="lm")
a+geom_point(color=3)+geom_smooth(method="lm")
a+geom_point(color="steelblue",size=4,alpha=0.5)+geom_smooth(method="lm")
a+geom_point(color=model,size=4,alpha=0.5)+geom_smooth(method="lm")
a+geom_point(color=Manufacturer,size=4,alpha=0.5)+geom_smooth(method="lm")
a+geom_point(color=manufacturer,size=4,alpha=0.5)+geom_smooth(method="lm")
summary(mpg)
a+geom_point(color=class,size=4,alpha=0.5)+geom_smooth(method="lm")
a+geom_point(color="steelblue",size=cyl/2,alpha=0.5)+geom_smooth(method="lm")
a+geom_point(color="steelblue",aes(size=cyl/2),alpha=0.5)+geom_smooth(method="lm")
a+geom_point(color="steelblue",aes(size=cyl),alpha=0.5)+geom_smooth(method="lm")
testdat <- data.frame(x = 1:100, y = rnorm(100))
testdat[50,2] <- 100  ## Outlier!
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x = x, y = y))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
cutpoints <- quantile(maacs$logno2_new, seq(0, 1, length = 4), na.rm = TRUE)
?cut
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
setwd("~/Dropbox/000_Meus Trabalhos/UFMG/2014/Courses/Coursera/05 Reproducible Research")
?plot.density
plot(density(x),zero.line=T)
rand
rand()
?plot.density
?hist
install.packages("xtable")
?print.xtable
?xtable
library(xtable)
?print.xtable
rm(list=ls())
setwd("~/Dropbox/000_Meus Trabalhos/UFMG/2014/Courses/Coursera/05 Reproducible Research/Peer assessment 1")
setwd("~/Dropbox/000_Meus Trabalhos/UFMG/2014/Courses/Coursera/05 Reproducible Research/Peer assessment 1")
data<-read.table("activity.csv",header=T,sep=",")
summary(data)
setwd("~/Dropbox/000_Meus Trabalhos/UFMG/2014/Courses/Coursera/05 Reproducible Research/RepData_PeerAssessment1")
?require
detach(unload=T)
data<-read.table("activity.csv", header=T, sep=",")
class(data[,2])
class(data[,3])
class(data[,1])
?as.Date
?class
summary(data)
data<-read.table("activity.csv", header=T, sep=",")
data<-transform(data,date=as.Date(date))
class(data$date)
?ggplot
library(ggplot2)
?ggplot
?geom_histogram
?geom_line
?stat_summary
?geom_line
?geom_vli
?geom_vline
?trunc
?tapply
a<-with(data,tapply(steps,date,sum))
a
data.daily<-data.frame(steps<-with(data,tapply(steps,date,sum)),day<-levels(date))
data.daily<-data.frame(steps<-with(data,tapply(steps,date,sum)),day<-unique(date))
data.daily<-data.frame(steps<-with(data,tapply(steps,date,sum)),day<-levels(data$date))
data.daily<-data.frame(steps<-with(data,tapply(steps,date,sum)),day<-unique(data$date))
data.daily
data.daily<-data.frame(steps=with(data,as.numeric(tapply(steps,date,sum))),day<-unique(data$date))
data.daily
data.daily<-data.frame(steps=with(data,as.numeric(tapply(steps,date,sum))),day=unique(data$date))
data.daily
?geom_vl
?geom_vline
m<-ggplot(data.daily,aes(steps),na.rm=T)
m<-m + geom_histogram(color="#222222",
fill="steelblue",
alpha=0.8)
m+geom_vline(xintercept=1000)
m+geom_vline(xintercept=mean(steps))
m+geom_vline(xintercept=mean(steps,na.rm=T))
m<-ggplot(data.daily,aes(steps),na.rm=T)
m<-m + geom_histogram(color="#222222",
fill="steelblue",
alpha=0.8)
m + geom_vline(aes(xintercept=steps.mean),
colour="black",
linetype = "longdash") +
geom_vline(aes(xintercept=steps.median),
colour="black",
linetype = "longdash")
steps.mean<-mean(data.daily$steps,na.rm=T)
steps.median<-median(data.daily$steps,na.rm=T)
m<-ggplot(data.daily,aes(steps),na.rm=T)
m<-m + geom_histogram(color="#222222",
fill="steelblue",
alpha=0.8)
m + geom_vline(aes(xintercept=steps.mean),
colour="black",
linetype = "longdash") +
geom_vline(aes(xintercept=steps.median),
colour="black",
linetype = "longdash")
steps.mean
summary(data)
m<-ggplot(data,aes(interval,steps))
m+geom_smooth()
m+geom_smooth()
m+geom_lines()
m+geom_line()
m+geom_point()
m+geom_point()+geom_smooth()
m+geom_point()+geom_smooth(method="loess")
class(data[,3])
unique(data[,3])
with(data,plot(interval,steps,type="n"))
with(data,plot(interval,steps,type="n",xaxt=F))
with(data,plot(interval,steps,type="n",axis=F))
with(data,plot(interval,steps,type="n",axes=F))
with(data,plot(interval,steps,type="n",axes=F,xlab="",ylab=""))
?lines
plot(interval,steps,type="n",axes=F,xlab="",ylab="");
with(data,{
# Prepare empty plot:
plot(interval,steps,type="n",axes=F,xlab="",ylab="");
# Insert semitransparent activity lines for each day
for(i in 1:length(unique(date))){
lines(interval[date==unique(date)[i]],steps[date==unique(date)[i]],alpha=0.4,lty=1,lwd=1)
}
})
warnings()
?lines
with(data,{
# Prepare empty plot:
plot(interval,steps,type="n",axes=F,xlab="",ylab="");
# Insert semitransparent activity lines for each day
for(i in 1:length(unique(date))){
points(interval[date==unique(date)[i]],steps[date==unique(date)[i]],alpha=0.4,type="l",lty=1,lwd=1)
}
})
with(data,{
# Prepare empty plot:
plot(interval,steps,type="n",axes=F,xlab="",ylab="");
# Insert semitransparent activity lines for each day
for(i in 1:length(unique(date))){
points(interval[date==unique(date)[i]],steps[date==unique(date)[i]],col="#eeeeee",type="l",lty=1,lwd=1)
}
})
warnings()
with(data,{
# Prepare empty plot:
plot(interval,steps,type="n",axes=F,xlab="",ylab="");
# Insert semitransparent activity lines for each day
for(i in 1:length(unique(date))){
lines(interval[date==unique(date)[i]],steps[date==unique(date)[i]],col="#dddddd",lty=1,lwd=1)
};
lines(unique(interval),tapply(steps,interval,mean),lty=1,lwd=2)
})
plot(interval,steps,type="n",axes=F,xlab="",ylab="");
with(data,plot(interval,steps,type="n",axes=F,xlab="",ylab=""))
with(data,lines(unique(interval),tapply(steps,interval,mean),lty=1,lwd=2))
with(data,tapply(steps,interval,mean))
?tapply
with(data,{
# Prepare empty plot:
plot(interval,steps,type="n",axes=F,xlab="",ylab="");
# Insert semitransparent activity lines for each day
for(i in 1:length(unique(date))){
lines(interval[date==unique(date)[i]],steps[date==unique(date)[i]],col="#dddddd",lty=1,lwd=1)
};
lines(unique(interval),tapply(steps,interval,mean,na.rm=T),lty=1,lwd=2)
})
rep(max(ave.steps),2)
ave.steps<-tapply(steps,interval,mean,na.rm=T);
with(data,ave.steps<-tapply(steps,interval,mean,na.rm=T));
rep(max(ave.steps),2)
ave.steps<-with(data,tapply(steps,interval,mean,na.rm=T));
rep(max(ave.steps),2)
c(0,1.05*mas(ave.steps))
a<-1:5
a<-10:15
which(a==12)
a[which(a==12) ]
?paste
rm(list=ls())
suppressPackageStartupMessages({
if(!require(knitr)){
install.packages("knitr")
library(knitr)
}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)
}
})
opts_chunk$set(echo=TRUE,warning=FALSE,message=FALSE)
data<-read.table("activity.csv", header=T, sep=",")
data<-transform(data,date=as.Date(date))
a<-with(data,tapply(steps,date,sum))
a
a<-with(data,as.numeric(tapply(steps,date,sum,na.rm=T)
)
)
a
a<-with(data,tapply(steps,date,sum,na.rm=T))
a
steps.byday<-with(data,tapply(steps,date,sum,na.rm=T))
steps.byday
names(steps.byday)
steps=as.numeric(steps.byday))
steps=as.numeric(steps.byday))
steps.byday<-with(data,tapply(steps,date,sum,na.rm=T))
data.byday<-data.frame(day=names(steps.byday),
steps=as.numeric(steps.byday))
data[which(data$date=="2012-11-30"),]
steps.byday<-with(data,tapply(steps,date,sum))
sum(c(1,2,3,NA))
sum(c(NA,NA),na.rm=T)
12*24
2304/288
8*288
library(knitr)
library(ggplot2)
data<-read.table("activity.csv", header=T, sep=",")
data<-transform(data,date=as.Date(date))
steps.byday<-with(data,tapply(steps,date,sum))
data.byday<-data.frame(day=as.Date(names(steps.byday)),
steps=as.numeric(steps.byday))
ave.steps<-with(data,tapply(steps,interval,mean,na.rm=T));
max.ave.steps<-max(ave.steps)
max.int<-with(data,interval[which(ave.steps==max.ave.steps)])
with(data,sum(is.na(steps)))
days.with.NAs<-unique(data[is.na(steps),"date"])
data2<-data
for (i in 1:length(days.with.NAs)){
data2[data2$date==days.with.NAs[i],"steps"]<-as.numeric(ave.steps)
}
days.with.NAs<-with(data,unique(data[is.na(steps),"date"]))
length(days.with.NAs)
data2<-data
for (i in 1:length(days.with.NAs)){
data2[data2$date==days.with.NAs[i],"steps"]<-as.numeric(ave.steps)
}
sum(is.na(data2$steps))
data.byday2<-transform(data.byday,steps=as.numeric(tapply(data2$steps,data2$date,sum)))
mean(data.byday2$steps)
median(data.byday2$steps)
median(data.byday$steps)
median(data.byday$steps,na.rm = T)
mean(data.byday$steps,na.rm = T)
?weekdays()
Sys.Date() -2440588
Sys.Date()
Sys.Date()-c(1234,4321)
weekdays(Sys.Date()-c(1234,4321))
weekdays(Sys.Date()-c(1234,4320))
is.weekday<-with(data2,weekdays(date))
summary(is.weekday)
is.weekday
is.weekday<-as.factor(is.weekday!="Saturday"||is.weekday!="Sunday")
summary(is.weekday)
is.weekday<-with(data2,weekdays(date))
is.weekday<-as.factor(is.weekday!="Saturday"|is.weekday!="Sunday")
summary(is.weekday)
is.weekday<-with(data2,as.factor(weekdays(date)))
summary(is)
summary(is.weekday)
is.weekday<-as.factor(is.weekday!="Saturday"|is.weekday!="Sunday")
summary(is.weekday)
is.weekday<-with(data2,as.factor(weekdays(date)))
is.weekday<-as.factor(is.weekday!="Saturday"&&is.weekday!="Sunday")
summary(is.weekday)
is.weekday<-with(data2,as.factor(weekdays(date)))
is.weekday<-as.factor(is.weekday!="Saturday"&&is.weekday!="Sunday")
summary(is.weekday)
is.weekday
week.day<-with(data2,as.factor(weekdays(date)))
week.day
summary(week.day)
week.day=="Sunday"
(week.day=="Sunday")||week.day
(week.day=="Sunday")||week.day=="Saturday
"
(week.day=="Sunday")|week.day=="Saturday"
is.weekday<-!((week.day=="Sunday")|(week.day=="Saturday"))
summary(is.weekday)
5/7
12960/4608
2/5
5/2
?transform
data2<-transform(data2,is.Weekday=is.weekday)
summary(data2)
?ggplot
ggplot(data2,aes(steps,panel=is.weekday))
p1<-ggplot(data2,aes(steps,panel=is.weekday))
p1+geom_line(steps,statistic="mean")
p1+geom_line(statistic="mean")
p1<-ggplot(data2,aes(steps,panel=is.weekday))
p1+geom_line(statistic="mean")
?aes
?geom_line
p1<-ggplot(data2[data2$is.weekday==T],aes(steps))+
geom_line(stat="mean")
p1<-ggplot(data2[data2$is.weekday==T],aes(steps))+
geom_line(stat="average")
p1<-ggplot(data2[data2$is.weekday==T],aes(steps))+
geom_line()
p1
library(lattice)
?xyplot
xyplot(steps~interval|is.weekday,data=data2)
stripplot(steps~interval|is.weekday,data=data2,type="l")
ave.steps.weekday<-with(data2[data2$is.weekday==T,],
tapply(steps,interval,mean));
ave.steps.weekday
data2[data2$is.weekday==T
,1]
summary(data2)
ave.steps.weekday<-with(data2[data2$is.Weekday==T,],
tapply(steps,interval,mean));
ave.steps.weekday
60*24
?logical
?mean
data3<-data.frame(Ave.Steps=as.numeric(c(ave.steps.weekday,ave.steps.weekend)),
Interval=c(names(ave.steps.weekday),names(ave.steps.weekend)),
Is.Weekday=c(rep(TRUE,length(ave.steps.weekday)),rep(FALSE,length(ave.steps.weekend))))
summary(data3)
week.day<-with(data2,as.factor(weekdays(date)))
is.Weekday<-!((week.day=="Sunday")|(week.day=="Saturday"))
ave.steps.weekday<-with(data2[is.Weekday==T,],
tapply(steps,interval,mean))
ave.steps.weekend<-with(data2[is.Weekday==F,],
tapply(steps,interval,mean));
data3<-data.frame(Ave.Steps=as.numeric(c(ave.steps.weekday,ave.steps.weekend)),
Interval=c(names(ave.steps.weekday),names(ave.steps.weekend)),
Is.Weekday=c(rep(TRUE,length(ave.steps.weekday)),rep(FALSE,length(ave.steps.weekend))))
summary(data3)
names(ave.steps.weekday
)
as.numeric(names(ave.steps.weekday))
rm(list=ls())
ls()
?xyplot
?lattice.getOption
ls()
library(ggplot2)
?panel.abline
